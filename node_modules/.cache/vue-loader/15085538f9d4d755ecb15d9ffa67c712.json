{"remainingRequest":"/Users/wuxingliu/ylz_work/2020/statistics/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wuxingliu/ylz_work/2020/statistics/src/components/EMPI.vue?vue&type=style&index=0&id=7f1402d4&scoped=true&lang=scss&","dependencies":[{"path":"/Users/wuxingliu/ylz_work/2020/statistics/src/components/EMPI.vue","mtime":1598107283000},{"path":"/Users/wuxingliu/ylz_work/2020/statistics/node_modules/css-loader/dist/cjs.js","mtime":1597766290974},{"path":"/Users/wuxingliu/ylz_work/2020/statistics/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1598022528944},{"path":"/Users/wuxingliu/ylz_work/2020/statistics/node_modules/postcss-loader/src/index.js","mtime":1598022528922},{"path":"/Users/wuxingliu/ylz_work/2020/statistics/node_modules/sass-loader/dist/cjs.js","mtime":1598144232417},{"path":"/Users/wuxingliu/ylz_work/2020/statistics/node_modules/cache-loader/dist/cjs.js","mtime":1598022527352},{"path":"/Users/wuxingliu/ylz_work/2020/statistics/node_modules/vue-loader/lib/index.js","mtime":1598022528944}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi50YWJsZS13cmFwcGVyIHsKICBtYXJnaW4tdG9wOiAxMHB4OwogIC50b29sLXNpZnQgewogICAgZGlzcGxheTogZmxleDsKICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7CiAgICBtYXJnaW46IDEwcHggMDsKICB9CgogIC5jaGFydHMgewogICAgZGlzcGxheTogZmxleDsKICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kOwogIH0KfQo="},{"version":3,"sources":["EMPI.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"EMPI.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"table-wrapper\">\n    <section class=\"tool-sift\">\n      <a-month-picker placeholder=\"选择月份\" v-model=\"date\" @change=\"getEmpiTable\" />\n    </section>\n    <a-table\n      :scroll=\"{ y: '30vh' }\"\n      :columns=\"empiColumns\"\n      :data-source=\"empiData\"\n      :pagination=\"false\"\n      :rowKey=\"genEmpiRowKey\"\n    >\n      <span slot=\"patientCount\" slot-scope=\"text\">{{ text }}</span>\n      <span slot=\"registerCount\"></span>\n      <span slot=\"exactCount\"></span>\n      <span slot=\"dimMatch\"></span>\n      <span slot=\"matchRatio\"></span>\n    </a-table>\n    <a-divider dashed />\n    <a-table\n      :scroll=\"{ y: '30vh' }\"\n      :columns=\"empiUseColumns\"\n      :data-source=\"systemUseData\"\n      :pagination=\"false\"\n      :rowKey=\"genSysUseRowKey\"\n    >\n      <span slot=\"SYSTEM_NAME\" slot-scope=\"text\">{{ text }}</span>\n      <span slot=\"INVOKE_COUNT\"></span>\n      <span slot=\"REGISTER_COUNT\"></span>\n    </a-table>\n    <a-divider dashed />\n    <section class=\"charts\">\n      <EMPILineChart :data=\"lineChartData\" />\n      <EMPIPieChart :data=\"systemUseData\" />\n    </section>\n  </div>\n</template>\n\n<script>\nimport { EMPI_COLUMNS, EMPI_USE_COLUMNS } from '../shared/dataColumns'\nimport EMPILineChart from './EMPILineChart'\nimport EMPIPieChart from './EMPIPieChart'\nimport moment from 'moment'\nimport { fetchEmpiTable, fetchMatchLine, fetchSysUseTable } from '../api/empiApi'\nimport { parseLineData } from '../shared/parseLineData'\nimport { getRequestData } from '../shared/getRequestData'\n\nexport default {\n  name: 'EMPI',\n  components: {\n    EMPILineChart,\n    EMPIPieChart,\n  },\n  data() {\n    return {\n      empiData: [],\n      systemUseData: [],\n      date: moment(),\n      empiColumns: EMPI_COLUMNS,\n      empiUseColumns: EMPI_USE_COLUMNS,\n      showModal: false,\n      lineChartData: [],\n    }\n  },\n  mounted() {\n    this.getEmpiTable()\n    this.getSysUseTable()\n    this.getMatchLine()\n  },\n  methods: {\n    onMonthChange(date) {\n      console.log('date', date)\n    },\n    async getEmpiTable(date) {\n      let year\n      let month\n      if (date == null) {\n        year = moment().year()\n        month = moment().month() + 1\n      } else {\n        year = date.year()\n        month = date.month() + 1\n      }\n\n      const res = await getRequestData(fetchEmpiTable)({ year, month })\n      this.empiData = res\n    },\n    async getMatchLine() {\n      const res = await getRequestData(fetchMatchLine)()\n      this.lineChartData = parseLineData(res, 'avgRatio')\n    },\n    async getSysUseTable() {\n      const res = await getRequestData(fetchSysUseTable)()\n      this.systemUseData = res\n    },\n    genEmpiRowKey(record) {\n      return record.id\n    },\n    genSysUseRowKey(record) {\n      return record.SYSTEM_NAME\n    },\n  },\n}\n</script>\n\n<style scoped lang=\"scss\">\n.table-wrapper {\n  margin-top: 10px;\n  .tool-sift {\n    display: flex;\n    justify-content: flex-end;\n    margin: 10px 0;\n  }\n\n  .charts {\n    display: flex;\n    justify-content: space-around;\n  }\n}\n</style>\n"]}]}